<root>
<tab name="SOLID">
SOLID (сокр. от англ. single responsibility, open–closed, Liskov substitution, 
interface segregation и dependency inversion) в программировании — мнемонический акроним,
 введённый Майклом Фэзерсом (Michael Feathers) для первых пяти принципов,
 названных Робертом Мартином[1][2] в начале 2000-х[3], которые означали 5 основных принципов объектно-ориентированного программирования и проектирования. 
</tab>
<tab name="DRY">
Don’t repeat yourself (DRY; с англ. — «не повторяйся») — это принцип разработки программного обеспечения, нацеленный на снижение повторения информации различного рода, особенно в системах со множеством слоёв абстрагирования. 
Принцип DRY формулируется как: «Каждая часть знания должна иметь единственное, непротиворечивое и авторитетное представление в рамках системы»[1]. Он был сформулирован Энди Хантом (англ.) и Дэйвом Томасом в их книге Программист-прагматик (англ.).
 Они применяли этот принцип к «схемам баз данных, планам тестирования, сборкам программного обеспечения, даже к документации»[2]. Когда принцип DRY применяется успешно, изменение единственного элемента системы не требует внесения изменений в другие, 
логически не связанные элементы. Те элементы, которые логически связаны, изменяются предсказуемо и единообразно. Помимо использования методов и функций в коде, Томас и Хант считают необходимым использование генераторов кода, автоматических систем компиляции. 
</tab>
<tab name="YAGNI">
YAGNI («You aren't gonna need it»; с англ. — «Вам это не понадобится») 
— процесс и принцип проектирования ПО,
 при котором в качестве основной цели и/или ценности
 декларируется отказ от избыточной функциональности, 
— то есть отказ добавления функциональности, в которой
 нет непосредственной надобности. Обоснование

Согласно адептам принципа YAGNI, желание писать код, 
который не нужен прямо сейчас, 
но может понадобиться в будущем, 
приводит к следующим нежелательным последствиям:

    Тратится время, которое было бы затрачено на добавление, 
тестирование и улучшение необходимой функциональности.
    Новые функции должны быть отлажены, документированы и сопровождаться.
    Новая функциональность ограничивает то, что может быть сделано в будущем,
 — ненужные новые функции могут впоследствии помешать добавить новые нужные.
    Пока новые функции действительно не нужны, трудно полностью предугадать,
 что они должны делать, и протестировать их. Если новые функции тщательно не протестированы,
 они могут неправильно работать, когда впоследствии понадобятся.
    Это приводит к тому, что программное обеспечение становится более сложным (подчас чрезмерно сложным).
    Если вся функциональность не документирована, она может так и остаться неизвестной пользователям,
 но может создать различные риски для безопасности пользовательской системы.
    Добавление новой функциональности может привести к желанию ещё более новой функциональности,
 приводя к эффекту «снежного кома».
</tab>
<tab name="KISS">
KISS (акроним для «Keep it simple, stupid» — «Делай проще, тупица») 
— принцип проектирования, принятый в ВМС США в 1960[1][2]. 
</tab>
<tab name="OOP">
Объе́ктно-ориенти́рованное программи́рование (сокр. ООП) — методология программирования,
 основанная на представлении программы в виде совокупности взаимодействующих объектов, 
каждый из которых является экземпляром определённого класса, а классы образуют иерархию наследования[1]. 
Идеологически ООП — подход к программированию как к моделированию информационных объектов,
 решающий на новом уровне основную задачу структурного программирования: структурирование информации 
с точки зрения управляемости[2], что существенно улучшает управляемость самим процессом моделирования,
 что, в свою очередь, особенно важно при реализации крупных проектов.

Управляемость для иерархических систем предполагает минимизацию избыточности данных (аналогичную нормализации)
 и их целостность, поэтому созданное удобно управляемым — будет и удобно пониматься. Таким образом, 
через тактическую задачу управляемости решается стратегическая задача — транслировать понимание задачи 
программистом в наиболее удобную для дальнейшего использования форму.

Основные принципы структурирования в случае ООП связаны с различными аспектами базового понимания предметной 
задачи, которое требуется для оптимального управления соответствующей моделью:

    абстракция для выделения в моделируемом предмете важного для решения конкретной задачи по предмету, в конечном счёте — 
контекстное понимание предмета, формализуемое в виде класса;
    инкапсуляция для быстрой и безопасной организации собственно иерархической управляемости: чтобы было достаточно
 простой команды «что делать», без одновременного уточнения как именно делать, так как это уже другой уровень управления;
    наследование для быстрой и безопасной организации родственных понятий: чтобы было достаточно на каждом иерархическом 
шаге учитывать только изменения, не дублируя всё остальное, учтённое на предыдущих шагах;
    полиморфизм для определения точки, в которой единое управление лучше распараллелить или наоборот — собрать воедино.
</tab>
<tab name="ACID">
ACID (от англ. atomicity, consistency, isolation, durability) 
— набор требований к транзакционной системе, обеспечивающий наиболее надёжную и предсказуемую её работу 
— атомарность[⇨], согласованность[⇨], изоляция[⇨], устойчивость[⇨];
 сформулированы в конце 1970-х годов Джимом Греем[1].
</tab>

</root>